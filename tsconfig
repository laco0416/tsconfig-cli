#!/usr/bin/env node
"use strict";

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _tsconfig = require("tsconfig");

var tsconfig = _interopRequireWildcard(_tsconfig);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version(require("./package.json").version).usage("[options] filepath\n  if the file includes comments, those will be striped.").option("-u, --update", "Update the file").option("-o, --output <output>", "Output file path").option("-v, --verbose", "Print verbose logs").parse(process.argv);

var opt = {};
opt.args = _commander2.default.args;
opt.update = _commander2.default.update || false;
opt.output = _commander2.default.output || "";
opt.verbose = _commander2.default.verbose || false;

var log = function log(str) {
  if (opt.verbose) {
    console.log(str);
  }
};

log("tsconfig-cli@" + _commander2.default.version() + " is running.");

new Promise(function (resolve, reject) {
  // Validate process arguments
  if (opt.args.length > 1) {
    reject("only 1 argument required");
  }
  resolve();
}).then(function () {
  // Check file existence
  var cfgPath = opt.args[0] || "tsconfig.json";
  return new Promise(function (resolve, reject) {
    _fs2.default.stat(cfgPath, function (err) {
      if (err) {
        reject(_path2.default.resolve(cfgPath) + " not exist");
      }
      resolve(cfgPath);
    });
  });
}).then(function (inputPath) {
  log("\tInput:\t\"" + inputPath + "\"");
  var projectDir = _path2.default.dirname(inputPath);
  if (opt.output) {
    opt.outputPath = _path2.default.resolve(projectDir, opt.output);
  } else {
    opt.outputPath = projectDir + "/" + _path2.default.basename(inputPath);
  }
  // Load tsconfig.json
  return tsconfig.readFile(inputPath).then(function (result) {
    // Detect TS2.0
    if (result.include) {
      log(opt.inputPath + " has 'include' property and 'filesGlob' is ignored.");
      return JSON.parse(_fs2.default.readFileSync(inputPath).toString());
    }
    // Resolve files into relative path
    var resolved = [];
    result.files.forEach(function (file) {
      resolved.push(_path2.default.relative(projectDir, file));
    });
    result.files = resolved;
    return result;
  });
}).then(function (tsconfig) {
  // Output
  var p = void 0;
  if (opt.update || opt.output) {
    // Overwrite tsconfig.json
    p = new Promise(function (resolve, reject) {
      _fs2.default.writeFile(opt.outputPath, JSON.stringify(tsconfig, null, 4), function (err) {
        if (err) {
          reject(err);
          return;
        }
        log("\tOutput:\t\"" + opt.outputPath + "\"");
        resolve();
      });
    });
  } else {
    console.log(JSON.stringify(tsconfig, null, 4));
    p = Promise.resolve(true);
  }
  return p;
}).then(function () {
  // Completed
  log("\tFinished!");
}).catch(function (err) {
  console.error("[tsconfig] " + err);
  process.exit(1);
});
